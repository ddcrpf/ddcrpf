# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uJR-ta4W4VYzSEdSw_0LdnPa42O_6OBE
"""

def length(string):
    if string == "":
        return 0
    else:
        return 1 + length(string[1:] )
str = "Geeksfor. Geeks"

print (length(str))

def find_min(list):
  if len(list) == 1:
    return list[0]
  return min(list[0], find_min(list[1:]))

listA = [9,6,1,80,9]
find_min(listA)

input.txt =
"df,
as,
cd,
io"

def copy(from_file,to_file):
  file1 = open(from_file, "r")
  file2 = open(from_file, "w")
  lines = file1.readlines()
  for i in range(1, len(lines)):
    if (i%2 != 0):
      file2.write(lines[i])
  print("copy successful")

  file1.close()
  # printer = file2.readlines()
  # print(printer)
  file2.close()

from_file = "input.txt"
to_file = "output.txt"
copy(from_file, to_file)

class Person:
  def __init__(self, usn, name, dob , gender):
    self.usn = usn
    self.name = name
    self.dob = dob
    self.gender = gender

class student(Person):
  def __init__(self, usn, name, dob , gender ,clas, branch, year):
    super().__init__
    self.clas = clas
    self.branch  = branch
    self.year = year

class marksattandence():
  def __init__ (self, marks, attandence):
    self.marks = marks
    self.attandence = attandence

s = student("1nt21ai043", "Prnjl", 2002-11-29," male" , 10, "aiml", 2019)

print("usn:", usn)
print("name:", name)
print("dob :", dob)
print("gender ", gender)

class Rectangle:
  def __init__(self, width, height , x_corner, y_corner):
    self.width = width
    self.height = height
    self.x_corner = x_corner
    self.y_corner = y_corner

    def area():
      return self.width * self.height

    def perimeter():
      return 2*(self.width , self.height)

    def center():
      center_x  =  self.width + self.center_x/2
      center_y  =  self.height + self.center_y/2

rect = Rectangle(10, 10 , 8 , 8)

import urllib
u = urllib.request.urlopen("https://www.geeksforgeeks.org/")
text = u.read()
number = re.findall(["0-9"]{7})

from urllib import request
resp = request.urlopen("https://www.wikipedia.org")
type(resp)

resp.code

data = resp.read()

from urllib import request
import re
reader = request.urlopen("https://www.redbus.in/info/redcare")
text = reader.read()
regex = "[0-9-]{9}[0-9-]+"
numbers = re.findall(regex, str(text), re.I)
for no in numbers:
  print(no)

from urllib import request
import re
reader = request.urlopen("https://www.redbus.in/info/redcare")
text = reader.read()
regex = "[7-9]\d{9}"
numbers = re.findall(regex, str(text), re.I)
for no in numbers:
  print(no)

import re
file1 = open("input.txt", "r")
file2 = open("output.txt", "w")
for line in file1:
  list = re.findall('[7-9]\d{9}')
  for n in list:
    file2.write(n+"\n")
print("extracted all mobile no in output.txt")
file1.close()
file2.close()

import re
n = input("enter number ")
m = re.fullmatch("[7-9]\d{9}",n)
if m!= None:
  print("valid mob no")
else :
  print("in valid mob no")

import re
n = input("enter email id")
m = re.fullmatch("\w[a-zA-Z0-9_.]*@gmail.com", n)
if m!= None:
  print("valid gmail")
else :
  print("invalid gmail")

from  datetime import datetime, timedelta

class birthday_calc:
  def __init__(self, birthday):
    self.birthday = datetime.strptime(birthday, "%Y-%m-%d").date()

  def age(self):
    print("self.birthday:",self.birthday )
    today = datetime.today().date()
    age = today.year - self.birthday.year
    if (today.month, today.day) < (self.birthday.month, self.birthday.day):
      age -= 1
    return age

  def timetobirthday(self):
    today  = datetime.today().date()
    next_birthday = datetime(today.year, self.birthday.month, self.birthday.day ).date()

    if next_birthday<today:
      next_birthday = datetime(today.year + 1, self.birthday.month, self.birthday.day).date()

    time_till_nextbirthday = next_birthday- today
    days = time_till_nextbirthday.days
    hours , remainder = divmod(time_till_nextbirthday.seconds, 3600)
    minutes , seconds = divmod(remainder, 60)

    return days, hours , minutes, seconds

dob = input("enter birthdate (yyyy-mm-dd):")
calc = birthday_calc(dob)
age = calc.age()
print("age = ", age)

days, hours, minutes , seconds = calc.timetobirthday()
print(f"days {days } hours {hours}, minutes {minutes}, sec {seconds}")

alphabet = "A"
for i in range(1,6):
  for j in range(i*2-1):
    print(alphabet, end = "")
    alphabet = chr(ord(alphabet)+1)

    if alphabet > "Z":
      alphabet = "A"
  print()

